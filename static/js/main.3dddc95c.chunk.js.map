{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","className","class","id","type","Alert","props","word","alert","role","toLowerCase","charAt","toUpperCase","slice","message","Navbar","to","title","TextForm","useState","text","setText","heading","onChange","event","target","value","rows","onClick","console","log","newText","navigator","clipboard","writeText","showAlert","split","length","defaultProps","App","setAlert","exact","path","msg","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3dddc95c.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function About() {\n    return (\n        <div className=\"container\">\n            <h1 className=\"my-2\">About Us</h1>\n            <div class=\"accordion\" id=\"accordionExample\">\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingOne\">\n      <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n        Accordion Item #1\n      </button>\n    </h2>\n    <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingTwo\">\n      <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n        Accordion Item #2\n      </button>\n    </h2>\n    <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingThree\">\n      <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n        Accordion Item #3\n      </button>\n    </h2>\n    <div id=\"collapseThree\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n</div>\n            \n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n\n    const capitalize = (word) => {\n        word = word.toLowerCase()\n        return word.charAt(0).toUpperCase() + word.slice(1)\n    }\n\n    return (\n        props.alert && <div>\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n                <strong>{capitalize(props.alert.type)}</strong> {props.alert.message}\n                \n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport {Link} from \"react-router-dom\"\n\nexport default function Navbar(props) {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  <div className=\"container-fluid\">\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n        </li>\n        <li className=\"nav-item\">\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\n        </li>\n      </ul>\n      {/* <form className=\"d-flex\">\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\n      </form> */}\n    </div>\n  </div>\n</nav>\n    )\n}\n\nNavbar.defaultProps = {\n    title: 'TextUtils'\n}\n","import React, {useState} from 'react'\n\n\nexport default function TextForm(props) {\n\n    const handleUpClick = () =>{\n        console.log(\"up\")\n        let newText = text.toUpperCase()\n        setText(newText)\n        \n        // setText(\"You tried to uppercase\")\n    }\n\n    const handleLowClick = () =>{\n        // console.log(\"up\")\n        let newText = text.toLowerCase()\n        setText(newText)\n        // setText(\"You tried to uppercase\")\n    } \n\n    const handleClearClick = () =>{\n        // console.log(\"up\")\n        let newText = \"\"\n        setText(newText)\n        props.showAlert('Text Cleared', 'warning')\n        // setText(\"You tried to uppercase\")\n    } \n\n    const handleCopyClick = () => {\n        navigator.clipboard.writeText(text)\n        props.showAlert('Copied to Clipboard', 'success')\n    }\n \n    const handleOnChange = (event) =>{\n        setText(event.target.value)\n    }\n\n    const [text, setText] = useState('');\n\n    return (\n        <>\n            <div className=\"container\">\n                <h1>{props.heading}</h1>\n                <div className=\"mb-3\">\n                    {/* <label for=\"myBox\" className=\"form-label\">Example textarea</label> */}\n                    {/* <label for=\"myBox\" className=\"form-label\"></label> */}\n                    <textarea className=\"form-control\" onChange = {handleOnChange} id=\"myBox\" rows=\"10\" value={text}></textarea>\n                </div>\n                <button className=\"btn btn-primary mx-2\" onClick = {handleUpClick}> Convert To Uppercase</button>\n                <button className=\"btn btn-primary mx-2\" onClick = {handleLowClick}> Convert To Lowercase</button>\n                <button className=\"btn btn-secondary mx-2\" onClick = {handleCopyClick}> Copy To Clipboard</button>\n                <button className=\"btn btn-danger mx-2\" onClick = {handleClearClick}> Clear Text</button>\n\n            </div>\n\n            <div className=\"container my-4\">\n                <h2>Text Summary</h2>\n                <p>Your text has {text.split(\" \").length} words and {text.length} characters</p>\n                <p>Your text takes {0.008 * text.split(\" \").length} minutes to read</p>\n                <h2>Preview</h2>\n                <p>{text.length > 0 ? text : 'Enter Text to Preview'}</p>\n            </div>\n        </>\n    )\n}\n","import './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar'\nimport TextForm from './components/TextForm'\nimport React, {useState} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n\n  const[alert, setAlert] = useState(null);\n\n  const showAlert = (msg, type) => {\n    setAlert({\n      message: msg,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n  }, 2000)\n  }\n  return (\n    <>\n    <Router>\n    <Navbar title=\"TextUtils\"/>\n    <Alert alert={alert}/>\n      <div className = \"container my-3\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm showAlert={showAlert} heading = {\"Enter Text\"}/>\n          </Route>\n\n        </Switch> \n\n        \n      </div>\n      </Router>\n      {/* <About></About> */}\n\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}